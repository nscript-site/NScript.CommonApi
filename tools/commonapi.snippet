<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
        <Title>[CommonApi] 创建TypedApiHandler 模板</Title>
        <Author>nscript</Author>
        <Description>创建新的 TypedApiHandler</Description>
        <Shortcut>typedapi</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>ApiName</ID>
                    <Default>ApiName</Default>
                </Literal>
                <Literal>
                    <ID>InputType</ID>
                    <Default>InputType</Default>
                </Literal>
                <Literal>
                    <ID>OutputType</ID>
                    <Default>OutputType</Default>
                </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[
[JsonSourceGenerationOptions(GenerationMode = JsonSourceGenerationMode.Serialization | JsonSourceGenerationMode.Metadata)]
[JsonSerializable(typeof($InputType$))]
[JsonSerializable(typeof($OutputType$))]
internal partial class $ApiName$SerializeOnlyContext : JsonSerializerContext
{
}

public class $ApiName$ApiHandler : TypedApiHandler<$InputType$, $OutputType$>
{
    protected override $OutputType$ Handle($InputType$? input)
    {
        if (input == null) return new $OutputType$ { code = Error.InvalidInput, message = "input is null" };
        // your api implementation here
        throw new NotImplementedException();
    }

    protected override (JsonTypeInfo<$InputType$>, JsonTypeInfo<$OutputType$>) GetTypeInfos()
    {
        return ($ApiName$SerializeOnlyContext.Default.$InputType$, $ApiName$SerializeOnlyContext.Default.$OutputType$);
    }
}
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.0.0">
        <Header>
        <Title>[CommonApi] 创建TypedPayloadApiHandler 模板</Title>
        <Author>nscript</Author>
        <Description>创建新的 TypedPayloadApiHandler</Description>
        <Shortcut>typedapipayload</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>ApiName</ID>
                    <Default>ApiName</Default>
                </Literal>
                <Literal>
                    <ID>InputType</ID>
                    <Default>InputType</Default>
                </Literal>
                <Literal>
                    <ID>OutputType</ID>
                    <Default>OutputType</Default>
                </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[
[JsonSourceGenerationOptions(GenerationMode = JsonSourceGenerationMode.Serialization | JsonSourceGenerationMode.Metadata)]
[JsonSerializable(typeof($InputType$))]
[JsonSerializable(typeof($OutputType$))]
internal partial class $ApiName$SerializeOnlyContext : JsonSerializerContext
{
}

public class $ApiName$ApiHandler : TypedPayloadApiHandler<$InputType$, $OutputType$>
{
    protected override $OutputType$ Handle($InputType$? input, Payload payload)
    {
        if (input == null) return new $OutputType$ { code = Error.InvalidInput, message = "input is null" };
        // your api implementation here
        throw new NotImplementedException();
    }

    protected override (JsonTypeInfo<$InputType$>, JsonTypeInfo<$OutputType$>) GetTypeInfos()
    {
        return ($ApiName$SerializeOnlyContext.Default.$InputType$, $ApiName$SerializeOnlyContext.Default.$OutputType$);
    }
}
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.0.0">
        <Header>
        <Title>[CommonApi] 创建 NativeAot 端 Api 及路由模板</Title>
        <Author>nscript</Author>
        <Description>创建 NativeAot 端 Api 及路由</Description>
        <Shortcut>typedapiroute</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>enterpoint_name</ID>
                    <Default>your_commonapi_enterpoint</Default>
                </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[
public class Api : BaseApi
{
    static Lazy<Api> Instance = new Lazy<Api>(() => {
        var api = new Api();
        // 注册 ApiHandler 到指定路由
        // api.Map("your-route1", new YourRoute1ApiHandler());
        // api.Map("your-route2", new YourRoute2ApiHandler());
        // ...
        // api.Map("echo", new EchoApiHandler());
        return api;
    });

    // 可以修改 EntryPoint 为其它名字
    [UnmanagedCallersOnly(EntryPoint = "$enterpoint_name$")]
    public unsafe static IntPtr Handle(IntPtr pRoute, IntPtr pJsonParams, IntPtr pDataPayload, int payloadLength)
    {
        return Instance.Value.HandleApi(pRoute, pJsonParams, pDataPayload, payloadLength);
    }

    /// <summary>
    /// 如果本库以 Jit 模式运行，调用 JitHandle 可以达到调用 Native Handle 一样的效果。
    /// </summary>
    public static IntPtr JitHandle(IntPtr pRoute, IntPtr pJsonParams, IntPtr pDataPayload, int payloadLength)
    {
        return Instance.Value.HandleApi(pRoute, pJsonParams, pDataPayload, payloadLength);
    }

    public static Api GetInstance()
    {
        return Instance.Value;
    }
}
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.0.0">
        <Header>
        <Title>[CommonApi] C# 调用端 wrapper 模板</Title>
        <Author>nscript</Author>
        <Description>创建 Typed Api Invoke Wrapper</Description>
        <Shortcut>typedapiwrapper</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>LibraryName</ID>
                    <Default>MyLib</Default>
                </Literal>
                <Literal>
                    <ID>dllname</ID>
                    <Default>dll_name</Default>
                </Literal>
                <Literal>
                    <ID>enterpoint_name</ID>
                    <Default>your_commonapi_enterpoint</Default>
                </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[
public class $LibraryName$
{
    public class $LibraryName$Wrapper : ApiWrapper
    {
        [DllImport("$dllname$")]
        static extern IntPtr $enterpoint_name$(IntPtr pRoute, IntPtr pJsonParams, IntPtr pDataPayload, int payloadLength);

        protected override IntPtr InvokeApi(IntPtr pRoute, IntPtr pJsonParams, IntPtr pDataPayload, int payloadLength)
        {
            return $enterpoint_name$(pRoute, pJsonParams, pDataPayload, payloadLength);
        }
    }

    static Lazy<$LibraryName$Wrapper> NativeApi = new Lazy<$LibraryName$Wrapper>(() => {
        return new $LibraryName$Wrapper();
    });

    /// <summary>
    /// 如果想 jit 模式调用，需要设置 jit handle
    /// </summary>
    /// <param name="jitHandle"></param>
    public static void SetJitHandle(Func<IntPtr, IntPtr, IntPtr, int, IntPtr> jitHandle)
    {
        NativeApi.Value.SetJitHook(jitHandle);
    }

    public static TOutput Invoke<TInput, TOutput>(string route, TInput input, byte[]? payload = null) where TOutput : BaseResult, new()
    {
        return NativeApi.Value.Invoke<TInput, TOutput>(route, input, payload);
    }

    public static TOutput Invoke<TInput, TOutput>(string route, TInput input, IntPtr pPayload, int payloadLength) where TOutput : BaseResult, new()
    {
        return NativeApi.Value.Invoke<TInput, TOutput>(route, input, pPayload, payloadLength);
    }
}
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>